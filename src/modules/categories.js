/**
 * categories.js - Определение категорий для материалов в приложении Balcony Calculator.
 * Категории используются для классификации материалов в Firestore и отображения их в интерфейсе
 * (например, в выпадающих списках на вкладках).
 */

/**
 * Объект категорий, структурированный по вкладкам.
 * Ключи - названия вкладок (например, "На заезд", "Остекление").
 * Значения - массивы подкатегорий, доступных для данной вкладки.
 * @type {Object.<string, string[]>}
 */
const categories = {
  'На заезд': [
    'Список на заезд',
    'Крепеж',
    'Плиточные работы',
    'Доп. параметр',
  ],
  'Остекление': [
    'Что делаем',
    'Основная рама',
    'Наружная отделка',
    'Замена балконного блока',
    'Окно',
    'Откосы для окон',
    'Подоконники',
    'Крыша',
    'Доп. параметр',
  ],
  'Главная стена': [
    'Вид отделки',
    'Покраска стен',
    'Вид утепления',
    'Направление отделки',
    'Доп. параметр',
  ],
  'Фасадная стена': [
    'Вид отделки',
    'Покраска стен',
    'Вид утепления',
    'Направление отделки',
    'Доп. параметр',
  ],
  'БЛ стена': [
    'Вид отделки',
    'Покраска стен',
    'Вид утепления',
    'Направление отделки',
    'Доп. параметр',
  ],
  'БП стена': [
    'Вид отделки',
    'Покраска стен',
    'Вид утепления',
    'Направление отделки',
    'Доп. параметр',
  ],
  'Потолок': [
    'Вид отделки',
    'Покраска потолка',
    'Вид утепления',
    'Направление отделки',
    'Доп. параметр',
  ],
  'Полы': [
    'Вид отделки',
    'Вид утепления',
    'Доп. параметр',
  ],
  'Электрика': [
    'Кабель',
    'Выключатель',
    'Розетка',
    'Спот',
    'Доп. параметр',
  ],
  'Мебель': [
    'Материал мебели',
    'Покраска мебели',
    'Полки Верх',
    'Полки Низ',
    'Бок у печки',
    'Столешница',
    'Доп. параметр',
  ],
  'Доп. параметр': [
    'Доп. параметр',
  ],
};

/**
 * Массив допустимых категорий в формате "TabName:SubCategory".
 * Используется для валидации и совместимости с текущей структурой Firestore.
 * @type {string[]}
 */
const validCategories = Object.entries(categories).reduce((acc, [tab, subCategories]) => {
  const tabCategories = subCategories.map(subCategory => `${tab}:${subCategory}`);
  return acc.concat(tabCategories);
}, []);

/**
 * Проверяет, является ли указанная категория допустимой.
 * @param {string} category - Категория в формате "TabName:SubCategory".
 * @returns {boolean} Возвращает true, если категория допустима, иначе false.
 */
function isValidCategory(category) {
  if (typeof category !== 'string') {
    console.warn('isValidCategory: Category must be a string, received:', category);
    return false;
  }
  return validCategories.includes(category);
}

/**
 * Возвращает список всех вкладок (названий табов).
 * @returns {string[]} Массив названий вкладок.
 */
function getTabs() {
  return Object.keys(categories);
}

/**
 * Возвращает список подкатегорий для указанной вкладки.
 * @param {string} tabName - Название вкладки (например, "Остекление").
 * @returns {string[]} Массив подкатегорий или пустой массив, если вкладка не найдена.
 */
function getSubCategories(tabName) {
  if (typeof tabName !== 'string') {
    console.warn('getSubCategories: TabName must be a string, received:', tabName);
    return [];
  }
  return categories[tabName] || [];
}

export { categories, validCategories, isValidCategory, getTabs, getSubCategories };